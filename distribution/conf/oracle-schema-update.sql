DECLARE
v_count NUMBER;
BEGIN
    -- 查询 CONFIG_INFO 表中名为 ENCRYPTED_DATA_KEY 的列是否为 CLOB 类型
    SELECT COUNT(*) INTO v_count
    FROM user_tab_columns
    WHERE table_name = 'CONFIG_INFO' AND column_name = 'ENCRYPTED_DATA_KEY' AND data_type = 'CLOB';

    -- 如果是 CLOB 类型，则执行列修改操作
    IF v_count = 1 THEN
        -- Step 1: Add new NVARCHAR2 column
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO ADD ENCRYPTED_DATA_KEY_temp NVARCHAR2(1024)';

        -- Step 2: Copy data from CLOB column to NVARCHAR2 column
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO SET ENCRYPTED_DATA_KEY_temp = DBMS_LOB.SUBSTR(ENCRYPTED_DATA_KEY, 1024, 1)';

        -- Step 3: Drop old CLOB column
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO DROP COLUMN ENCRYPTED_DATA_KEY';

        -- Step 4: Rename new NVARCHAR2 column to original column name
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO RENAME COLUMN ENCRYPTED_DATA_KEY_temp TO ENCRYPTED_DATA_KEY';
    END IF;
END;


DECLARE
v_count NUMBER;
BEGIN
    -- 查询 CONFIG_INFO_BETA 表中名为 ENCRYPTED_DATA_KEY 的列是否为 CLOB 类型
    SELECT COUNT(*) INTO v_count
    FROM user_tab_columns
    WHERE table_name = 'CONFIG_INFO_BETA' AND column_name = 'ENCRYPTED_DATA_KEY' AND data_type = 'CLOB';
    -- 如果是 CLOB 类型，则执行列修改操作
    IF v_count = 1 THEN
        -- Step 1: Add new NVARCHAR2 column
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA ADD ENCRYPTED_DATA_KEY_temp NVARCHAR2(1024)';

        -- Step 2: Copy data from CLOB column to NVARCHAR2 column
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_BETA SET ENCRYPTED_DATA_KEY_temp = DBMS_LOB.SUBSTR(ENCRYPTED_DATA_KEY, 1024, 1)';

        -- Step 3: Drop old CLOB column
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA DROP COLUMN ENCRYPTED_DATA_KEY';

        -- Step 4: Rename new NVARCHAR2 column to original column name
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA RENAME COLUMN ENCRYPTED_DATA_KEY_temp TO ENCRYPTED_DATA_KEY';
    END IF;
END;

DECLARE
v_count NUMBER;
BEGIN
    -- 查询 HIS_CONFIG_INFO 表中名为 ENCRYPTED_DATA_KEY 的列是否为 CLOB 类型
    SELECT COUNT(*) INTO v_count
    FROM user_tab_columns
    WHERE table_name = 'HIS_CONFIG_INFO' AND column_name = 'ENCRYPTED_DATA_KEY' AND data_type = 'CLOB';
    -- 如果是 CLOB 类型，则执行列修改操作
    IF v_count = 1 THEN
        -- Step 1: Add new NVARCHAR2 column
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO ADD ENCRYPTED_DATA_KEY_temp NVARCHAR2(1024)';

        -- Step 2: Copy data from CLOB column to NVARCHAR2 column
        EXECUTE IMMEDIATE 'UPDATE HIS_CONFIG_INFO SET ENCRYPTED_DATA_KEY_temp = DBMS_LOB.SUBSTR(ENCRYPTED_DATA_KEY, 1024, 1)';

        -- Step 3: Drop old CLOB column
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO DROP COLUMN ENCRYPTED_DATA_KEY';

        -- Step 4: Rename new NVARCHAR2 column to original column name
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO RENAME COLUMN ENCRYPTED_DATA_KEY_temp TO ENCRYPTED_DATA_KEY';
    END IF;
END;

DECLARE
v_count NUMBER;
BEGIN
    -- 查询 CONFIG_INFO 表中名为 GMT_CREATE 的列是否为 DATE 类型
    SELECT COUNT(*) INTO v_count
    FROM user_tab_columns
    WHERE table_name = 'CONFIG_INFO' AND column_name = 'GMT_CREATE' AND data_type = 'DATE';
    -- 如果是 DATE 类型，则执行列修改操作
    IF v_count = 1 THEN
        -- CONFIG_INFO table
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- CONFIG_INFO_AGGR table
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_AGGR ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_AGGR SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_AGGR SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_AGGR DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_AGGR RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_AGGR MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- CONFIG_INFO_BETA table
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_BETA SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_BETA SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_BETA SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_BETA SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_BETA MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- CONFIG_INFO_TAG table
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_TAG SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_TAG SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_TAG SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE CONFIG_INFO_TAG SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIG_INFO_TAG MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- HIS_CONFIG_INFO table
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE HIS_CONFIG_INFO SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE HIS_CONFIG_INFO SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE HIS_CONFIG_INFO SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE HIS_CONFIG_INFO SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE HIS_CONFIG_INFO MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- GROUP_CAPACITY table
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE GROUP_CAPACITY SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE GROUP_CAPACITY SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE GROUP_CAPACITY SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE GROUP_CAPACITY SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE GROUP_CAPACITY MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        -- TENANT_CAPACITY table
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY ADD GMT_CREATE_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE TENANT_CAPACITY SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE TENANT_CAPACITY SET GMT_CREATE_TS = CAST(GMT_CREATE AS TIMESTAMP) WHERE GMT_CREATE_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY DROP COLUMN GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY RENAME COLUMN GMT_CREATE_TS TO GMT_CREATE';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY MODIFY GMT_CREATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';

        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY ADD GMT_MODIFIED_TS TIMESTAMP';
        EXECUTE IMMEDIATE 'UPDATE TENANT_CAPACITY SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP)';
        EXECUTE IMMEDIATE 'UPDATE TENANT_CAPACITY SET GMT_MODIFIED_TS = CAST(GMT_MODIFIED AS TIMESTAMP) WHERE GMT_MODIFIED_TS IS NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY DROP COLUMN GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY RENAME COLUMN GMT_MODIFIED_TS TO GMT_MODIFIED';
        EXECUTE IMMEDIATE 'ALTER TABLE TENANT_CAPACITY MODIFY GMT_MODIFIED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL';
    END IF;
END;
